pipeline {
    agent any

    stages {
        stage('Build Core Services') {
            steps {
                script {
                    // 순서대로 Core 서비스들을 빌드 및 배포합니다.
                    def coreServices = ["api-gateway", "config-service", "discovery-service"]

                    for (service in coreServices) {
                        dir(service) {
                            // 변경사항이 있을 때만 빌드 및 배포
                            if (hasChanges(service)) {
                                echo "Building and deploying ${service}"
                                buildAndDeployService(service)
                            } else {
                                echo "No changes detected in ${service}. Skipping."
                            }
                        }
                    }
                }
            }
        }

        stage('Build Other Services') {
            steps {
                script {
                    // 나머지 서비스들에 대해 빌드 및 배포를 진행합니다.
                    def otherServices = ["album-service", "calendar-service", "family-service", "interest-service", "notification-service", "question-service", "timecapsule-service", "user-service"]

                    for (service in otherServices) {
                        dir(service) {
                            if (hasChanges(service)) {
                                echo "Building and deploying ${service}"
                                buildAndDeployService(service)
                            } else {
                                echo "No changes detected in ${service}. Skipping."
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed."
        }
    }
}

// 공통 함수: 변경 사항 확인
def hasChanges(String service) {
    return sh(script: "git diff --name-only HEAD~1 HEAD | grep ${service}/", returnStatus: true) == 0
}

// 공통 함수: 빌드 및 배포
def buildAndDeployService(String service) {
    sh """
        docker build -t ${service}-image .

        // 기존 컨테이너 중지 및 삭제
        docker stop ${service} || true
        docker rm ${service} || true

        // 새로운 컨테이너 실행
        docker run --name ${service} -d -p 8080:8080 ${service}-image
    """
}
