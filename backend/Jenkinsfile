pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build and Deploy Config Server') {
            when {
                changeset "backend/config-service/**"
            }
            steps {
                withCredentials([file(credentialsId: 'config-application.yml', variable: 'application_yml')]) {
                    script {
                        dir('backend/config-service') {
                            copyApplicationYaml(application_yml)
                            buildAndRunContainer('config-service', 8888, true)
                        }
                    }
                }
            }
        }

        stage('Build and Deploy Discovery Server') {
            when {
                changeset "backend/discovery-service/**"
            }
            steps {
                withCredentials([file(credentialsId: 'discovery-application.yml', variable: 'application_yml')]) {
                    script {
                        dir('backend/discovery-service') {
                            copyApplicationYaml(application_yml)
                            buildAndRunContainer('discovery-service', 8761, true)
                        }
                    }
                }
            }
        }

        stage('Build and Deploy API Gateway') {
            when {
                changeset "backend/api-gateway/**"
            }
            steps {
                withCredentials([file(credentialsId: 'api-gateway-application.yml', variable: 'application_yml')]) {
                    script {
                        dir('backend/api-gateway') {
                            copyApplicationYaml(application_yml)
                            buildAndRunContainer('api-gateway-service', 8000, true)  // 외부 포트 8000에 노출
                        }
                    }
                }
            }
        }

        stage('Build and Deploy Services') {
            parallel {
                stage('Build and Deploy Album Service') {
                    when {
                        changeset "backend/album-service/**"
                    }
                    steps {
                        withCredentials([file(credentialsId: 'album-application.yml', variable: 'application_yml')]) {
                            script {
                                dir('backend/album-service') {
                                    copyApplicationYaml(application_yml)
                                    buildAndRunContainer('album-service', 8084, false) // 내부 네트워크에서만 통신
                                }
                            }
                        }
                    }
                }
                stage('Build and Deploy Calendar Service') {
                    when {
                        changeset "backend/calendar-service/**"
                    }
                    steps {
                        withCredentials([file(credentialsId: 'calendar-application.yml', variable: 'application_yml')]) {
                            script {
                                dir('backend/calendar-service') {
                                    copyApplicationYaml(application_yml)
                                    buildAndRunContainer('calendar-service', 8085, false) // 내부 네트워크에서만 통신
                                }
                            }
                        }
                    }
                }
                stage('Build and Deploy User Service') {
                    steps {
                        withCredentials([
                            file(credentialsId: 'user-application.yml', variable: 'application_yml'),
                            file(credentialsId: 'familring-firebase-key.json', variable: 'firebase_key')
                        ]) {
                            script {
                                dir('backend/user-service') {
                                    copyFiles(application_yml)

                                    // firebase key 추가
                                    sh "cp ${firebase_key} src/main/resources/firebaseKey.json"

                                    buildAndRunContainer('user-service', 8086, false) // 내부 네트워크에서만 통신
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

// 공통 함수: application.yml 복사
def copyApplicationYaml(application_yml) {
    sh 'mkdir -p src/main/resources'
    sh "cp ${application_yml} src/main/resources/application.yml"
}

// 공통 함수: 컨테이너 중지 및 삭제
def stopAndRemoveContainer(containerName) {
    def container = sh(script: "docker ps -a --filter 'name=${containerName}' --format '{{.ID}}'", returnStdout: true).trim()
    if (container) {
        sh "docker stop ${container}"
        sh "docker rm ${container}"
    }
}

// 공통 함수: 컨테이너 빌드 및 실행
def buildAndRunContainer(serviceName, port, exposeToHost) {
    stopAndRemoveContainer(serviceName)
    sh 'chmod +x ./gradlew'
    sh './gradlew clean build -x test'
    sh "docker build -t ${serviceName} ."

    // 호스트에 노출할지 여부에 따라 -p 옵션을 추가
    if (exposeToHost) {
        sh "docker run --name ${serviceName} -d -p ${port}:${port} ${serviceName}"
    } else {
        sh "docker run --name ${serviceName} -d -p ${port}:8000 ${serviceName}"
    }
}
