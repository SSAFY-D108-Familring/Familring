// 파이프라인 변수 선언 (초기 값 설정)
def activeInstance = 'album-service-blue'

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build and Deploy Album Service') {
            steps {
                withCredentials([file(credentialsId: 'album-application.yml', variable: 'application_yml')]) {
                    script {
                        // 활성화된 인스턴스를 기반으로 새로운 인스턴스 선택
                        def newInstance = (activeInstance == 'album-service-blue') ? 'album-service-green' : 'album-service-blue'

                        dir('backend/album-service') {
                            copyApplicationYaml(application_yml)
                            buildAndRunContainer(newInstance) // 내부 네트워크에서만 통신
                        }

                        // album-service의 헬스 체크
                        waitForServiceHealthCheck('album-service')

                        // 헬스 체크 통과 후 이전 인스턴스 삭제
                        stopAndRemoveContainer(activeInstance)

                        // 다음 배포를 위해 activeInstance 변수를 업데이트
                        activeInstance = newInstance
                    }
                }
            }
        }
    }
}

// 공통 함수: application.yml 복사
def copyApplicationYaml(application_yml) {
    sh 'mkdir -p src/main/resources'
    sh "cp ${application_yml} src/main/resources/application.yml"
}

// 공통 함수: 컨테이너 중지 및 삭제
def stopAndRemoveContainer(containerName) {
    def container = sh(script: "docker ps -a --filter 'name=${containerName}' --format '{{.ID}}'", returnStdout: true).trim()
    if (container) {
        sh "docker stop ${container}"
        sh "docker rm ${container}"
    }
}

def waitForServiceHealthCheck(serviceName) {
    def retries = 10
    while (retries > 0) {
        def status = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://localhost/${serviceName}/health", returnStdout: true).trim()
        if (status == '200') {
            echo "${serviceName} is healthy through Nginx."
            return
        }
        sleep 5 // 잠시 대기
        retries--
    }
    error "${serviceName} failed to pass health check through Nginx."
}


// 공통 함수: 컨테이너 빌드 및 실행
def buildAndRunContainer(serviceName) {
    stopAndRemoveContainer(serviceName)
    sh 'chmod +x ./gradlew'
    sh './gradlew clean build -x test'
    sh "docker build -t ${serviceName} ."
//     sh "docker run --name ${serviceName} -d ${serviceName}"
    sh "docker run --network host --name ${serviceName} -d ${serviceName}"

}
