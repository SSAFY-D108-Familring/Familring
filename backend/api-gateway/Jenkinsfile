pipeline {
    agent any

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build and Deploy API Gateway') {
            steps {
                withCredentials([file(credentialsId: 'api-gateway-application.yml', variable: 'application_yml')]) {
                    script {
                        dir('backend/api-gateway') {
                            copyApplicationYaml(application_yml)
                            buildAndRunContainer('api-gateway-service', 8000)
                        }
                    }
                }
            }
        }

        stage('Notification') {
            steps{
                echo 'jenkins notification!'
            }
            post {
                success {
                    script {
                        // 마지막 커밋을 푸시한 사용자 정보 가져오기
                        def user = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()
                        def serviceName = env.JOB_NAME  // 현재 빌드 중인 서비스 이름

                        // Mattermost로 성공 메시지 전송
                        mattermostSend(
                            color: 'good',
                            message: "✅ ${serviceName} 빌드 성공 - ${user}님이 푸시한 커밋입니다.",
                        )
                    }
                }
                failure {
                    script {
                        // 마지막 커밋을 푸시한 사용자 정보 가져오기
                        def user = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()
                        def serviceName = env.JOB_NAME

                        // Mattermost로 실패 메시지 전송
                        mattermostSend(
                            color: 'danger',
                            message: "❌ ${serviceName} 빌드 실패 - ${user}님이 푸시한 커밋입니다.",
                        )
                    }
                }
            }
        }
    }
}

// 공통 함수: application.yml 복사
def copyApplicationYaml(application_yml) {
    sh 'mkdir -p src/main/resources'
    sh "cp ${application_yml} src/main/resources/application.yml"
}

// 공통 함수: 컨테이너 중지 및 삭제
def stopAndRemoveContainer(containerName) {
    def container = sh(script: "docker ps -a --filter 'name=${containerName}' --format '{{.ID}}'", returnStdout: true).trim()
    if (container) {
        sh "docker stop ${containerName}"
        sh "docker rm ${containerName}"
    }
}

// 공통 함수: 컨테이너 빌드 및 실행
def buildAndRunContainer(serviceName, port) {
    stopAndRemoveContainer(serviceName)
    sh 'chmod +x ./gradlew'
    sh './gradlew build --build-cache -x test'
    sh "docker build -t ${serviceName} ."
    sh "docker run --name ${serviceName} -d -p ${port}:${port} ${serviceName}"
}
