// 파이프라인 변수 선언 (초기 값 설정 없이 동적 확인)
def activeInstance = ''

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Detect Active Instance') {
            steps {
                script {
                    // 동적으로 현재 실행 중인 인스턴스를 감지
                    activeInstance = isContainerRunning('timecapsule-service') ? 'timecapsule-service' :
                                     (isContainerRunning('timecapsule-service-green') ? 'timecapsule-service-green' : 'timecapsule-service')
                }
            }
        }
        stage('Build and Deploy TimeCapsule Service') {
            steps {
                withCredentials([file(credentialsId: 'timecapsule-application.yml', variable: 'application_yml')]) {
                    script {
                        dir('backend/timecapsule-service') {
                            // Determine the new instance to deploy based on the currently active instance
                            def newInstance = (activeInstance == 'timecapsule-service') ? 'timecapsule-service-green' : 'timecapsule-service'

                            copyApplicationYaml(application_yml)
                            buildAndRunContainer(newInstance) // Deploy the new instance

                            // Stop and remove the old instance if it was running
                            if (isContainerRunning(activeInstance)) {
                                stopAndRemoveContainer(activeInstance)
                            }

                            // Update activeInstance to newInstance for future deployments
                            activeInstance = newInstance
                        }
                    }
                }
            }
        }
    }
}

// 공통 함수: application.yml 복사
def copyApplicationYaml(application_yml) {
    sh 'mkdir -p src/main/resources'
    sh "cp ${application_yml} src/main/resources/application.yml"
}

// 컨테이너 실행 중 확인 함수
def isContainerRunning(containerName) {
    def containerId = sh(script: "docker ps --filter 'name=${containerName}' --format '{{.ID}}'", returnStdout: true).trim()
    return containerId ? true : false
}

// 공통 함수: 컨테이너 중지 및 삭제
def stopAndRemoveContainer(containerName) {
    def containerId = sh(script: "docker ps -a --filter 'name=${containerName}' --format '{{.ID}}'", returnStdout: true).trim()
    if (containerId) {
        sh "docker stop ${containerId}"
        sh "docker rm ${containerId}"
    }
}

// 공통 함수: 컨테이너 빌드 및 실행
def buildAndRunContainer(serviceName) {
    stopAndRemoveContainer(serviceName) // Ensure the target container is stopped before building
    sh 'chmod +x ./gradlew'
    sh './gradlew clean build -x test'
    sh "docker build -t ${serviceName} ."
    sh "docker run --name ${serviceName} -d ${serviceName}"
}
