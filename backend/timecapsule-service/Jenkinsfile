// Pipeline variable declaration with initial value set to the actual blue instance name
def activeInstance = 'timecapsule-service'

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build and Deploy TimeCapsule Service') {
            steps {
                withCredentials([file(credentialsId: 'timecapsule-application.yml', variable: 'application_yml')]) {
                    script {
                        // Choose a new instance based on the current active instance
                        def newInstance = (activeInstance == 'timecapsule-service') ? 'timecapsule-service-green' : 'timecapsule-service'

                        dir('backend/timecapsule-service') {
                            copyApplicationYaml(application_yml)
                            buildAndRunContainer(newInstance) // Run only in the internal network
                        }

                        // Stop and remove the existing active instance
                        stopAndRemoveContainer(activeInstance)

                        // Update activeInstance for the next deployment
                        activeInstance = newInstance
                    }
                }
            }
        }
    }
}

// Function to copy application.yml
def copyApplicationYaml(application_yml) {
    sh 'mkdir -p src/main/resources'
    sh "cp ${application_yml} src/main/resources/application.yml"
}

// Function to stop and remove container
def stopAndRemoveContainer(containerName) {
    def container = sh(script: "docker ps -a --filter 'name=${containerName}' --format '{{.ID}}'", returnStdout: true).trim()
    if (container) {
        sh "docker stop ${container}"
        sh "docker rm ${container}"
    }
}

// Function to build and run container
def buildAndRunContainer(serviceName) {
    stopAndRemoveContainer(serviceName)
    sh 'chmod +x ./gradlew'
    sh './gradlew clean build -x test'
    sh "docker build -t ${serviceName} ."
    sh "docker run --name ${serviceName} -d ${serviceName}"
}
