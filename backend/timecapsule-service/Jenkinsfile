// 파이프라인 변수 선언 (초기 값 없이 동적 확인)
def activeInstance = ''
def activeInstanceStatus = ''

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Detect Active Instance') {
            steps {
                script {
                    // 현재 인스턴스 상태를 확인 (exited 또는 running 상태)
                    if (isContainerRunning('timecapsule-service')) {
                        activeInstance = 'timecapsule-service'
                        activeInstanceStatus = 'running'
                    } else if (isContainerExited('timecapsule-service')) {
                        activeInstance = 'timecapsule-service'
                        activeInstanceStatus = 'exited'
                    } else if (isContainerRunning('timecapsule-service-green')) {
                        activeInstance = 'timecapsule-service-green'
                        activeInstanceStatus = 'running'
                    } else if (isContainerExited('timecapsule-service-green')) {
                        activeInstance = 'timecapsule-service-green'
                        activeInstanceStatus = 'exited'
                    } else {
                        activeInstance = 'timecapsule-service'
                        activeInstanceStatus = 'not found'
                    }
                }
            }
        }
        stage('Build and Deploy TimeCapsule Service') {
            steps {
                withCredentials([file(credentialsId: 'timecapsule-application.yml', variable: 'application_yml')]) {
                    script {
                        dir('backend/timecapsule-service') {
                            // 현재 인스턴스 상태에 따라 새로 배포할 인스턴스를 결정
                            def newInstance = (activeInstanceStatus == 'running') ?
                                              ((activeInstance == 'timecapsule-service') ? 'timecapsule-service-green' : 'timecapsule-service') :
                                              activeInstance

                            copyApplicationYaml(application_yml)
                            buildAndRunContainer(newInstance) // 새로운 인스턴스 실행

                            // 기존 인스턴스가 실행 중인 경우 중지 및 삭제
                            if (activeInstanceStatus == 'running') {
                                stopAndRemoveContainer(activeInstance)
                            }

                            // 다음 배포를 위해 activeInstance 변수를 업데이트
                            activeInstance = newInstance
                        }
                    }
                }
            }
        }
    }
}

// application.yml 복사 함수
def copyApplicationYaml(application_yml) {
    sh 'mkdir -p src/main/resources'
    sh "cp ${application_yml} src/main/resources/application.yml"
}

// 컨테이너 실행 중인지 확인하는 함수
def isContainerRunning(containerName) {
    def containerId = sh(script: "docker ps --filter 'name=${containerName}' --format '{{.ID}}'", returnStdout: true).trim()
    return containerId ? true : false
}

// 컨테이너 상태가 exited인지 확인하는 함수
def isContainerExited(containerName) {
    def containerStatus = sh(script: "docker inspect -f '{{.State.Status}}' ${containerName}", returnStdout: true).trim()
    return containerStatus == 'exited'
}

// 공통 함수: 컨테이너 중지 및 삭제
def stopAndRemoveContainer(containerName) {
    def containerId = sh(script: "docker ps -a --filter 'name=${containerName}' --format '{{.ID}}'", returnStdout: true).trim()
    if (containerId) {
        sh "docker stop ${containerId}"
        sh "docker rm ${containerId}"
    }
}

// 공통 함수: 컨테이너 빌드 및 실행
def buildAndRunContainer(serviceName) {
    stopAndRemoveContainer(serviceName) // 배포 전 기존 컨테이너 중지 및 삭제
    sh 'chmod +x ./gradlew'
    sh './gradlew clean build -x test'
    sh "docker build -t ${serviceName} ."
    sh "docker run --name ${serviceName} -d ${serviceName}"
}
