// 파이프라인 변수 선언 (초기 값 설정)
def activeInstance = 'timecapsule-service'

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build and Deploy TimeCapsule Service') {
            steps {
                withCredentials([file(credentialsId: 'timecapsule-application.yml', variable: 'application_yml')]) {
                    script {
                        dir('backend/timecapsule-service') {
                            // 현재 activeInstance가 실행 중인지 확인
                            def isActiveRunning = isContainerRunning(activeInstance)
                            def newInstance = isActiveRunning ? ((activeInstance == 'timecapsule-service') ? 'timecapsule-service-green' : 'timecapsule-service') : activeInstance

                            copyApplicationYaml(application_yml)
                            buildAndRunContainer(newInstance) // 내부 네트워크에서만 통신

                            // 기존 인스턴스가 실행 중인 경우에만 중지 및 삭제
                            if (isActiveRunning) {
                                stopAndRemoveContainer(activeInstance)
                            }

                            // 다음 배포를 위해 activeInstance 변수를 업데이트
                            activeInstance = newInstance
                        }
                    }
                }
            }
        }
    }
}

// 공통 함수: application.yml 복사
def copyApplicationYaml(application_yml) {
    sh 'mkdir -p src/main/resources'
    sh "cp ${application_yml} src/main/resources/application.yml"
}

// 컨테이너 실행 중 확인 함수
def isContainerRunning(containerName) {
    def containerId = sh(script: "docker ps --filter 'name=${containerName}' --format '{{.ID}}'", returnStdout: true).trim()
    return containerId ? true : false
}

// 공통 함수: 컨테이너 중지 및 삭제
// 공통 함수: 컨테이너 중지 및 삭제
def stopAndRemoveContainer(containerName) {
    def containerId = sh(script: "docker ps -a --filter 'name=${containerName}' --format '{{.ID}}'", returnStdout: true).trim()
    if (containerId) {
        // 중지
        echo "Stopping container ${containerName} with ID: ${containerId}"
        sh "docker stop ${containerId}"

        // 삭제
        echo "Removing container ${containerName} with ID: ${containerId}"
        sh "docker rm ${containerId}"
    } else {
        echo "No container found with the name: ${containerName}"
    }
}

// 공통 함수: 컨테이너 빌드 및 실행
def buildAndRunContainer(serviceName) {
    stopAndRemoveContainer(serviceName)
    sh 'chmod +x ./gradlew'
    sh './gradlew clean build -x test'
    sh "docker build -t ${serviceName} ."
    sh "docker run --name ${serviceName} -d ${serviceName}"
}
